/* SCSS mixins for Nova UI */
@use 'functions' as functions;
@use "sass:color";

// Generate CSS variables for a theme
@mixin nova-css-vars($theme-name, $primary, $secondary, $accent1, $accent2, $accent3, $background, $surface, $surface-alt) {
  --nova-primary: #{$primary};
  --nova-primary-rgb: #{color.channel($primary, "red", $space: rgb)}, 
                      #{color.channel($primary, "green", $space: rgb)}, 
                      #{color.channel($primary, "blue", $space: rgb)};
  
  --nova-secondary: #{$secondary};
  --nova-secondary-rgb: #{color.channel($secondary, "red", $space: rgb)}, 
                        #{color.channel($secondary, "green", $space: rgb)}, 
                        #{color.channel($secondary, "blue", $space: rgb)};
  
  --nova-accent1: #{$accent1};
  --nova-accent1-rgb: #{color.channel($accent1, "red", $space: rgb)}, 
                      #{color.channel($accent1, "green", $space: rgb)}, 
                      #{color.channel($accent1, "blue", $space: rgb)};
  
  --nova-accent2: #{$accent2};
  --nova-accent2-rgb: #{color.channel($accent2, "red", $space: rgb)}, 
                      #{color.channel($accent2, "green", $space: rgb)}, 
                      #{color.channel($accent2, "blue", $space: rgb)};
  
  --nova-accent3: #{$accent3};
  --nova-accent3-rgb: #{color.channel($accent3, "red", $space: rgb)}, 
                      #{color.channel($accent3, "green", $space: rgb)}, 
                      #{color.channel($accent3, "blue", $space: rgb)};
  
  --nova-background: #{$background};
  --nova-background-rgb: #{color.channel($background, "red", $space: rgb)}, 
                        #{color.channel($background, "green", $space: rgb)}, 
                        #{color.channel($background, "blue", $space: rgb)};
  
  --nova-surface: #{$surface};
  --nova-surface-rgb: #{color.channel($surface, "red", $space: rgb)}, 
                      #{color.channel($surface, "green", $space: rgb)}, 
                      #{color.channel($surface, "blue", $space: rgb)};
  
  --nova-surface-alt: #{$surface-alt};
  --nova-surface-alt-rgb: #{color.channel($surface-alt, "red", $space: rgb)}, 
                          #{color.channel($surface-alt, "green", $space: rgb)}, 
                          #{color.channel($surface-alt, "blue", $space: rgb)};
  
  --nova-on-primary: #{if(color.lightness($primary) > 50%, #000000, #ffffff)};
  --nova-on-secondary: #{if(color.lightness($secondary) > 50%, #000000, #ffffff)};
  --nova-on-background: #{if(color.lightness($background) > 50%, #000000, #ffffff)};
  --nova-on-surface: #{if(color.lightness($surface) > 50%, #000000, #ffffff)};
}

// Glow effect mixin
@mixin nova-glow($color, $intensity: 'medium') {
  $glow-opacity: 0.6;
  $glow-spread: 0px;
  
  @if $intensity == 'subtle' {
    $glow-opacity: 0.4;
    $glow-spread: 1px;
  } @else if $intensity == 'intense' {
    $glow-opacity: 0.8;
    $glow-spread: 4px;
  }
  
  // Convert CSS variable to a usable color value if needed
  $color-value: #{$color};
  @if type-of($color) == 'string' and str-index($color, 'var(--') != null {
    // Use rgba function with the CSS variable and opacity
    box-shadow: 0 0 8px #{$glow-spread} #{$color};
    border: 1px solid #{$color};
  } @else {
    // Use SCSS color functions if it's an actual color value
    box-shadow: 0 0 8px #{$glow-spread} rgba(#{$color}, #{$glow-opacity});
    border: 1px solid rgba(#{$color}, #{$glow-opacity + 0.1});
  }
  
  transition: box-shadow 0.3s ease, border 0.3s ease;
  
  &:hover {
    @if type-of($color) == 'string' and str-index($color, 'var(--') != null {
      box-shadow: 0 0 12px #{$glow-spread + 2px} #{$color};
    } @else {
      box-shadow: 0 0 12px #{$glow-spread + 2px} rgba(#{$color}, #{$glow-opacity + 0.2});
    }
  }
}

// Screen size breakpoints
@mixin nova-screen-sm {
  @media (min-width: 640px) { @content; }
}

@mixin nova-screen-md {
  @media (min-width: 768px) { @content; }
}

@mixin nova-screen-lg {
  @media (min-width: 1024px) { @content; }
}

@mixin nova-screen-xl {
  @media (min-width: 1280px) { @content; }
}

@mixin nova-screen-2xl {
  @media (min-width: 1536px) { @content; }
}